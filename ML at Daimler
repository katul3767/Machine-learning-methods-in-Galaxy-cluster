import numpy as np
import pandas as pd
import os
import sys
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error
from scipy import interpolate
from datetime import datetime

sys.path.append(r'C:\Users\atkumar\OneDrive - cellcentric\00_codebase')

from cc_data_loader import *
from cc_testbenches import *

# Load and preprocess the data
csv_file_path = 'ml_samples_atul.csv'
df = pd.read_csv(csv_file_path)
df['file'] = [os.path.basename(f) for f in df.filename.values]

excl_files = [
    '20230329_080543_191_2436v003.mf4',
    '20230314_150747_191_2410j.mf4',
    '20230324_131552_191_2410j.mf4',
    '20230427_131649_191_2565b.mf4'
]

# Filter specified files
revisited_df = df[~df['file'].isin(excl_files)]

# Feature selection
features = ['EI_S', 'Amf_Si_calc', 'AT_HMi', 'dt_su', 'umax_su']

input_data = revisited_df[features]
target_data = revisited_df['EU_S']

# Mean imputation for input_data
imputer = SimpleImputer(strategy='mean')
input_data = imputer.fit_transform(input_data)

target_imputer = SimpleImputer(strategy='mean')
target_data = target_imputer.fit_transform(target_data.values.reshape(-1, 1))

# Split the data into training and testing sets
input_data_train, input_data_test, target_data_train, target_data_test = train_test_split(
    input_data, target_data, test_size=0.2, random_state=42
)

# Scaling features
scaler = StandardScaler()
input_data_train = scaler.fit_transform(input_data_train)
input_data_test = scaler.transform(input_data_test)

# Define models with default hyperparameters
models = [
    ('Linear Regression', LinearRegression()),
    ('Ridge Regression', Ridge()),
    ('Lasso Regression', Lasso()),
    ('ElasticNet Regression', ElasticNet()),
    ('Decision Tree Regression', DecisionTreeRegressor()),
    ('Random Forest Regression', RandomForestRegressor())
]

# Hyperparameter grid for each model
param_grid = {
    'Ridge Regression': {'alpha': [0.1, 1.0, 10.0]},
    'Lasso Regression': {'alpha': [0.1, 1.0, 10.0]},
    'ElasticNet Regression': {'alpha': [0.1, 1.0, 10.0], 'l1_ratio': [0.1, 0.5, 0.9]},
    'Decision Tree Regression': {'max_depth': [5, 10, 15]},
    'Random Forest Regression': {'n_estimators': [100, 200, 300], 'max_depth': [10, 15, 20]}
}

# Iterate through models and perform grid search for hyperparameters
for name, model in models:
    if name in param_grid:
        grid_search = GridSearchCV(model, param_grid[name], cv=5, n_jobs=-1)
        grid_search.fit(input_data_train, target_data_train)
        model = grid_search.best_estimator_

    model.fit(input_data_train, target_data_train)

    # Predict on the test set
    target_data_test_pred = model.predict(input_data_test)
    mse_test = mean_squared_error(target_data_test, target_data_test_pred)

    target_data_train_pred = model.predict(input_data_train)
    mse_train = mean_squared_error(target_data_train, target_data_train_pred)

    # Print MSE
    print(f"{name} - Mean Squared Error (Test Data): {mse_test}")
    print(f"{name} - Mean Squared Error (Train Data): {mse_train}")
